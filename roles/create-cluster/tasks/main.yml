---
# tasks file for pre-install
- name: create ssh keypair
  shell: ssh-keygen -t rsa -b 2048 -N '' -C 'developer' -f ~/.ssh/id_rsa
  args:
    creates: ~/.ssh/id_rsa
  when: not ansible_check_mode

- name: slurp ssh pubkey
  tags: config
  slurp:
    src: ~/.ssh/id_rsa.pub
  register: bastion_pubkey

- name: Create floating ip for load balancer API
  shell: openstack floating ip create {{ external_network }} --description "API {{ cluster_domain_name }}" --tag {{ cluster_name }} --os-cloud={{ os_cloud }} -f value -c floating_ip_address
  register: lb_floating_ip
  when: not ansible_check_mode

- name: Create floating ip for Ingress
  shell: openstack floating ip create {{ external_network }} --description "Ingress {{ cluster_domain_name }}" --tag {{ cluster_name }} --os-cloud={{ os_cloud }} -f value -c floating_ip_address
  register: ingress_floating_ip
  when: not ansible_check_mode

- set_fact:
    lb_floating_ip={{ lb_floating_ip.stdout }}
    ingress_floating_ip={{ ingress_floating_ip.stdout }}
  when: not ansible_check_mode

- name: Generate Install-config.yaml 
  template:
    dest: "{{ ocp4_install_dir }}/{{ item }}"
    src: install-config.yaml.j2
  with_items:
    - install-config.yaml
    - install-config.copy.yaml
  when: not ansible_check_mode

- name: create local /etc/hosts entry for cluster
  copy:
    dest: /etc/hosts
    content: >
      {{ lb_floating_ip }}  api.maliocp.example.com
      {{ ingress_floating_ip }}  console-openshift-console.apps.maliocp.example.com
      {{ ingress_floating_ip }}  integrated-oauth-server-openshift-authentication.apps.maliocp.example.com
      {{ ingress_floating_ip }}  oauth-openshift.apps.maliocp.example.com
      {{ ingress_floating_ip }}  prometheus-k8s-openshift-monitoring.apps.example.com
      {{ ingress_floating_ip }}  grafana-openshift-monitoring.apps.example.com
  become: true
  when: not ansible_check_mode

- name: Run openshift-install
  shell: "./openshift-install create cluster --dir={{ ocp4_install_dir }} --log-level=debug"
  args:
    chdir: "{{ ocp4_dir }}"
    creates: "{{ ocp4_dir }}/metadata.json"
  check_mode: no
  register: installer_log

- debug:
    msg: "{{ installer_log.stdout }}"
